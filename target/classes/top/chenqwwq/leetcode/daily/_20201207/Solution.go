package _20201207

/**
 * @author chen
 * @date: 2020/12/7 下午9:04
 * @description:
 *
 */

/**
861. 翻转矩阵后的得分
有一个二维矩阵 A 其中每个元素的值为 0 或 1 。

移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 0 都更改为 1，将所有 1 都更改为 0。

在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。

返回尽可能高的分数。



示例：

输入：[[0,0,1,1],[1,0,1,0],[1,1,0,0]]
输出：39
解释：
转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]
0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39


提示：

1 <= A.length <= 20
1 <= A[0].length <= 20
A[i][j] 是 0 或 1

*/

func matrixScore(A [][]int) int {
	// 对横竖分别采取不同的贪心策略
	// 横向需要尽量使首位为1
	// 竖向每个值一致所以1越多越好

	// 横向
	u := len(A)
	a := len(A[0])
	for i := 0; i < u; i++ {
		if A[i][0] != 0 {
			continue
		}
		for j := 0; j < a; j++ {
			A[i][j] ^= 1
		}
	}

	max := func(i, j int) int {
		if i > j {
			return i
		}
		return j
	}

	res, base := 0, 1
	// 竖向
	for i := a - 1; i >= 0; i-- {
		base = 1 << (a - 1 - i)
		c1 := 0
		for j := 0; j < u; j++ {
			if A[j][i] == 1 {
				c1++
			}
		}

		res += max(c1, u-c1) * base
	}

	return res
}
